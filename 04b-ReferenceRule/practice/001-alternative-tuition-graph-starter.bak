#lang htdp/bsl

(require test-engine/racket-tests)
(require 2htdp/image)

; Check that check-expect is working in this format
(check-expect true true)
(check-expect false false)
;(check-expect false true)
;(check-expect true false)

;; 001-alternative-tuition-graph-starter.rkt

;; Consider the following alternative type comment for Eva's school tuition 
;; information program. Note that this is just a single type, with no reference, 
;; but it captures all the same information as the two types solution in the 
;; videos.
;;
;; (define-struct school (name tuition next))
;; School is one of:
;;  - false
;;  - (make-school String Natural School)
;; interp. an arbitrary number of schools, where for each school we have its
;;         name and its tuition in USD
;;
;; (A) Confirm for yourself that this is a well-formed self-referential data 
;;    definition.
;;
;; (B) Complete the data definition making sure to define all the same examples as 
;;    for ListOfSchool in the videos.
;;
;; (C) Design the chart function that consumes School. Save yourself time by 
;;    simply copying the tests over from the original version of chart.
;;
;; (D) Compare the two versions of chart. Which do you prefer? Why?

; Constants

(define FONT-SIZE  24)
(define FONT-COLOR "black")

(define Y-SCALE   1/200)
(define BAR-WIDTH 30)
(define BAR-COLOR "lightblue")

;; (A)
;; From the design recipe:
;; In order to be well-formed, a self-referential data definition must:
;;
;; (i) have at least one case without self reference (the base case(s))
;;(ii) have at least one case with self reference

;; (define-struct school (name tuition next))
;; School is one of:
;;  - false
;;  - (make-school String Natural School)
;; interp. an arbitrary number of schools, where for each school we have its
;;         name and its tuition in USD

;; Base case is "false" and the self reference is seen in the second case where
;; the third item is a School data type

;; Yes, this is a well-formed, self-referential data type



;; (B)
;; Data definitions

(define-struct school (name tuition next))
;; School is one of:
;;  - false
;;  - (make-school String Natural School)
;; interp. an arbitrary number of schools, where for each school we have its
;;         name and its tuition in USD
(define S0 false)
(define S1 (make-school "School1" 27797 S0)) ; We encourage you to look up real schools
(define S2 (make-school "School2" 23300 S1)) ; of interest to you -- or any similar data
(define S3 (make-school "School3" 28500 S2))

(define (fn-for-school s)
  (cond [(false? s) (...)]
        [else (... (school-name s)
       (school-tuition s)
       (fn-for-school (school-next s)))]))

;; Template rules used:
;;  - one of: 2 cases
;;  - atomic distinct: false
;;  - compound: (make-school String Natural School)
;;  - atomic non-distinct: (school-name s) is String
;;  - atomic non-distinct: (school-tuition s) is Natural
;;  - self-reference: (school-next s) is School



;; (C)

;; Functions:

;; School -> Image
;; produce bar chart showing names and tuition of consumed schools
(check-expect (chart S0) (square 0 "solid" "white"))
(check-expect (chart (make-school "S1" 8000 false))
              (beside (overlay/align "center" "bottom"
                                     (rotate 90 (text "S1" FONT-SIZE FONT-COLOR))
                                     (rectangle BAR-WIDTH (* 8000 Y-SCALE) "outline" "black")
                                     (rectangle BAR-WIDTH (* 8000 Y-SCALE) "solid" BAR-COLOR))
                      (square 0 "solid" "white")))

(check-expect (chart (make-school "S2" 12000 (make-school "S1" 8000 false)))
              (beside/align "bottom"
                            (overlay/align "center" "bottom"
                                           (rotate 90 (text "S2" FONT-SIZE FONT-COLOR))
                                           (rectangle BAR-WIDTH (* 12000 Y-SCALE) "outline" "black")
                                           (rectangle BAR-WIDTH (* 12000 Y-SCALE) "solid" BAR-COLOR))
                            (overlay/align "center" "bottom"
                                           (rotate 90 (text "S1" FONT-SIZE FONT-COLOR))
                                           (rectangle BAR-WIDTH (* 8000 Y-SCALE) "outline" "black")
                                           (rectangle BAR-WIDTH (* 8000 Y-SCALE) "solid" BAR-COLOR))
                            (square 0 "solid" "white")))

;;(define (chart s) (square 0 "solid" "white")) ; stub


(define (chart s)
  (cond [(false? s) (square 0 "solid" "white")]
        [else (beside/align "bottom"
                            (overlay/align "center" "bottom"
                                           (rotate 90 (text (school-name s) FONT-SIZE FONT-COLOR))
                                           (rectangle BAR-WIDTH (* (school-tuition s) Y-SCALE) "outline" "black")
                                           (rectangle BAR-WIDTH (* (school-tuition s) Y-SCALE) "solid" BAR-COLOR))
              (chart (school-next s)))]))

;; (D)
;;
;; The first approach is easier to read and understand since it
;; breaks it into 2 functions. 1 is for building the bar and the
;; other goes through the list. The second appoarch rolls it all
;; into 1 function and is not as clear to another reader

